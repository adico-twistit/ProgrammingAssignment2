{
    "contents" : "## matrix w/cached inverse class based on makeVector & cachemean \n\n## create a cached-inverse-matrix object, \n## assuming passed argument x is a non-singular matrix\n## returns a list of methods to interact with the inner matrix\nmakeCacheMatrix <- function(x = matrix()) {\n  m <- NULL\n  set <- function(y) {\n    x <<- y\n    m <<- NULL\n  }\n  get <- function() x\n  setinv <- function(inv) m <<- inv\n  getinv <- function() m\n  list(set = set, get = get,\n       setinv = setinv,\n       getinv = getinv)\n}\n\n\n## cache time-consuming matrix-inverse computations\ncacheSolve <- function(x, ...) {\n  ## Return a matrix that is the inverse of 'x'\n  m <- x$getinv()\n  if(!is.null(m)) {\n    message(\"getting cached data\")\n    return(m)\n  }\n  data <- x$get()\n  m <- solve(data, ...)\n  x$setinv(m)\n  m\n}\n",
    "created" : 1436044120394.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "588846615",
    "id" : "20F91D24",
    "lastKnownWriteTime" : 1436047144,
    "path" : "C:/work/jsn/R/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}